/*
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
*/

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#if 0 // it takes O(n^2) time so use prefix and sufix multiplication
int* productExceptSelf(int* nums, int numsSize, int* returnSize) {
    int *ptr = (int*)malloc(numsSize*sizeof(int));
    int mul=1;

    for(int i=0;i<numsSize;i++){
        for(int j=0;j<numsSize;j++){
            if(i!=j){
                mul *=nums[j];
            }
        }
        ptr[i] = mul;
        mul=1;
    }
    *returnSize = numsSize;
    return ptr;
}
#endif


/*
Let's say we have an array:

nums
=
[
𝑎
,
𝑏
,
𝑐
,
𝑑
]
nums=[a,b,c,d]
We want to compute:

𝑜
𝑢
𝑡
𝑝
𝑢
𝑡
[
𝑖
]
=
product of all elements except 
𝑛
𝑢
𝑚
𝑠
[
𝑖
]
output[i]=product of all elements except nums[i]
The key observation is:

output
[
𝑖
]
=
prefix product at 
𝑖
×
suffix product at 
𝑖
output[i]=prefix product at i×suffix product at i
Where:

Prefix product at i = product of all elements before i
Suffix product at i = product of all elements after i
Index i  	nums[i]	  Prefix Product (Before i)	    Suffix Product (After i)	     output[i] = prefix × suffix
0	         a	          1	                           b × c × d	                      b × c × d
1	         b	          a	                              c × d                        	a × c × d
2	         c	        a × b	                            d	                             a × b × d
3	         d	        a × b × c	                        1	                             a × b × c


*/


int* productExceptSelf(int* nums, int numsSize, int* returnSize) {
    int* output = (int*)malloc(numsSize * sizeof(int));
    *returnSize = numsSize;
    
    // Step 1: Compute Prefix Product
    output[0] = 1;
    for (int i = 1; i < numsSize; i++) {
        output[i] = output[i - 1] * nums[i - 1];
    }

    // Step 2: Compute Suffix Product & Update Output
    int suffix = 1;
    for (int i = numsSize - 1; i >= 0; i--) {
        output[i] *= suffix;
        suffix *= nums[i];
    }

    return output;
}

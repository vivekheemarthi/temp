/*
  Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 

Example 1:

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
 

Constraints:

0 <= key, value <= 106
At most 104 calls will be made to put, get, and remove

  */




#include <stdio.h>
#include <stdlib.h>

#define HASH_SIZE 1000  // Define the size of the hash table

// Node structure for separate chaining (linked list)
typedef struct Node {
    int key;
    int value;
    struct Node* next;
} Node;

// HashMap structure containing an array of linked list heads
typedef struct {
    Node* table[HASH_SIZE];  // Array of pointers to handle collisions
} MyHashMap;

// Hash function to compute an index for a given key
int hashFunction(int key) {
    return key % HASH_SIZE;
}

// Initialize the HashMap
MyHashMap* myHashMapCreate() {
    MyHashMap* obj = (MyHashMap*)malloc(sizeof(MyHashMap));
    for (int i = 0; i < HASH_SIZE; i++) {
        obj->table[i] = NULL;  // Initialize all slots as NULL
    }
    return obj;
}

// Insert (key, value) pair into HashMap
void myHashMapPut(MyHashMap* obj, int key, int value) {
    int index = hashFunction(key);
    Node* curr = obj->table[index];

    // Check if key already exists, update value
    while (curr) {
        if (curr->key == key) {
            curr->value = value;  // Update existing key
            return;
        }
        curr = curr->next;
    }

    // Create a new node and insert at head (chaining)
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = key;
    newNode->value = value;
    newNode->next = obj->table[index];
    obj->table[index] = newNode;
}

// Get value for a key
int myHashMapGet(MyHashMap* obj, int key) {
    int index = hashFunction(key);
    Node* curr = obj->table[index];

    while (curr) {
        if (curr->key == key) {
            return curr->value;  // Return found value
        }
        curr = curr->next;
    }
    return -1;  // Key not found
}

// Remove a key from HashMap
void myHashMapRemove(MyHashMap* obj, int key) {
    int index = hashFunction(key);
    Node* curr = obj->table[index];
    Node* prev = NULL;

    while (curr) {
        if (curr->key == key) {
            if (prev) {
                prev->next = curr->next;
            } else {
                obj->table[index] = curr->next;
            }
            free(curr);
            return;
        }
        prev = curr;
        curr = curr->next;
    }
}

// Free the HashMap
void myHashMapFree(MyHashMap* obj) {
    for (int i = 0; i < HASH_SIZE; i++) {
        Node* curr = obj->table[i];
        while (curr) {
            Node* temp = curr;
            curr = curr->next;
            free(temp);
        }
    }
    free(obj);
}

// Main function to test the HashMap
int main() {
    MyHashMap* myHashMap = myHashMapCreate();
    
    myHashMapPut(myHashMap, 1, 1);
    myHashMapPut(myHashMap, 2, 2);
    printf("Get key 1: %d\n", myHashMapGet(myHashMap, 1)); // Output: 1
    printf("Get key 3: %d\n", myHashMapGet(myHashMap, 3)); // Output: -1
    myHashMapPut(myHashMap, 2, 1); 
    printf("Get key 2: %d\n", myHashMapGet(myHashMap, 2)); // Output: 1
    myHashMapRemove(myHashMap, 2);
    printf("Get key 2: %d\n", myHashMapGet(myHashMap, 2)); // Output: -1

    myHashMapFree(myHashMap);
    return 0;
}

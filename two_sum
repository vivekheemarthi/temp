/*

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]



*/


#include <stdio.h>
#include <stdlib.h>

int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int *ptr = (int*)malloc(2 * sizeof(int));
    if (!ptr) return NULL;  // Handle memory allocation failure

    for (int i = 0; i < numsSize; i++) {
        for (int j = i + 1; j < numsSize; j++) { // Start from i+1
            if (nums[i] + nums[j] == target) {
                ptr[0] = i;
                ptr[1] = j;
                *returnSize = 2; // Indicate that we are returning two elements
                return ptr;
            }
        }
    }
    
    free(ptr); // Free memory if no pair is found
    *returnSize = 0;
    return NULL; // Return NULL if no solution is found
}

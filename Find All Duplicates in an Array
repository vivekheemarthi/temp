/******************* only for when the array is sorted and when duplicate valie has only 2 times occured *****************/
/*


Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears at most twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant auxiliary space, excluding the space needed to store the output

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:

Input: nums = [1,1,2]
Output: [1]
Example 3:

Input: nums = [1]
Output: []

*/



/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findDuplicates(int* nums, int numsSize, int* returnSize) {
    int *ptr = (int *)malloc(numsSize*sizeof(int));
    int val=0;
    *returnSize=0;
    for(int i=0;i<numsSize;i++){
        val = abs(nums[i]);

        if(nums[val-1] < 0){
            ptr[(*returnSize)++] = val;

        } else {
            nums[val-1] = -nums[val-1];
        }

    }
    return ptr;
}




/*  many duplicate values and unsorted array also */
/*
If numsSize = 5 and nums[i] = 5, we need seen[5] to exist.
If we allocate only numsSize, the highest valid index would be 4, causing out-of-bounds errors.
*/
int* findDuplicates(int* nums, int numsSize, int* returnSize) {
    int *ptr = (int *)malloc(numsSize * sizeof(int));
    int val = 0;
    *returnSize = 0;
    
    bool seen[numsSize + 1];  // Track already stored duplicates
    memset(seen, 0, sizeof(seen));  

    for (int i = 0; i < numsSize; i++) {
        val = abs(nums[i]);

        if (nums[val - 1] < 0) {  // Already visited, so it's a duplicate
            if (!seen[val]) {  // Ensure it's added only once
                ptr[(*returnSize)++] = val;
                seen[val] = true;  // Mark as added
            }
        } else {
            nums[val - 1] = -nums[val - 1];  // Mark as visited
        }
    }

    return ptr;
}
